package com.akihabara.market.dao;
import com.akihabara.market.model.ProductoOtaku;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ProductoDAO {
    private DatabaseConnection dbConnection;
    
    //Constructor que inicaliza la conexion al llamar a la clase
    public ProductoDAO() {
    	dbConnection = new DatabaseConnection();
    }
    
    public void agregarProducto(ProductoOtaku producto) {
    	String consulta = "INSERT INTO producto(nombre, categoria, precio, stock) VALUES (?, ?, ?, ?)";
    	
    	//Dentro del try establecemos la conexion a la db y preparamos la consulta con pstmt
    	try (Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta)){
    		
    		//Asignamos los valores a la consulta, extraidos de los metodos getter de la clase ProductoOtaku
    		pstmt.setString(1, producto.getNombre());
    		pstmt.setString(2, producto.getCategoria());
    		pstmt.setDouble(3, producto.getPrecio());
    		pstmt.setInt(4, producto.getStock());
    		
    		//Ejecutamos la consulta
    		pstmt.executeUpdate();
    		System.out.println("Producto agregado correctamente.");
    		
    	} catch(SQLException e) {
    		 System.out.println("Error al agregar producto: " + e.getMessage());
    	}
    }
    
    public ProductoOtaku obtenerProductoPorId(int id) {
    	String consulta = "SELECT * FROM producto WHERE id = ?";
    	
    	//Dentro del try establecemos la conexion a la db y preparamos la consulta con pstmt
    	try (Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta)){
    		
    		pstmt.setInt(1, id);
    		ResultSet rs = pstmt.executeQuery();
    		
    		if(rs.next()) {
    			return new ProductoOtaku(
    				    rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("categoria"),
                        rs.getDouble("precio"),
                        rs.getInt("stock")
                        );
    		}
    	} catch(SQLException e) {
    		  System.out.println("Error al obtener producto: " + e.getMessage());
    	}
        return null;
    }
    
    public List<ProductoOtaku>obtenerTodosLosProductos(){
    	List<ProductoOtaku> productos = new ArrayList<>();
    	String consulta = "SELECT * FROM producto";
    	
    	try(Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta);
    			ResultSet rs = pstmt.executeQuery()){
    		
    		while (rs.next()) {
    			productos.add(new ProductoOtaku(
    					rs.getInt("id"),
    					rs.getString("nombre"),
    					rs.getString("categoria"),
    					rs.getDouble("precio"),
    					rs.getInt("stock")
    			));
    		}
    	} catch(SQLException e) {
    		 System.out.println("Error al obtener productos: " + e.getMessage());
    	}
    	return productos;
    }
    
    public boolean actualizarProducto(ProductoOtaku producto) {
    	String consulta = "UPDATE producto SET nombre = ?, categoria =?, precio=?, stock =? WHERE id = ?";
    	
    	try(Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta)){
    		pstmt.setString(1, producto.getNombre());
    		pstmt.setString(2, producto.getCategoria());
    		pstmt.setDouble(3, producto.getPrecio());
    		pstmt.setInt(4, producto.getStock());
    		pstmt.setInt(5, producto.getId());
    		
    		int filas = pstmt.executeUpdate();
    		System.out.println("Producto actualizado con exito");
    		return filas >0;
    		
    		
    	} catch(SQLException e) {
    		System.out.println("Error al actualizar productos: " + e.getMessage());
    	}
    	return false;
    }
    
    public boolean eliminarProducto(int id) {
    	String consulta = "DELETE FROM producto WHERE id = ?";
    	
    	try(Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta)){
    		
    		pstmt.setInt(1, id);
    		
    		int filas = pstmt.executeUpdate();
    		System.out.println("Producto Eliminado con exito");
    		return filas>0;
    		
    	} catch(SQLException e) {
    		System.out.println("Error al Eliminar el producto: " + e.getMessage());
    	}
    	return false;
    }
    
    public List<ProductoOtaku>buscarProductosPorNombre(String nombre){
    	List<ProductoOtaku> producto = new ArrayList<>();
    	String consulta = "SElECT * FROM producto WHERE nombre LIKE ?";
    	
    	try(Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta);
    			){
    		
    		pstmt.setString(1, "%"+nombre+"%");
    		ResultSet rs = pstmt.executeQuery();
    		
    		while (rs.next()) {
    			producto.add(new ProductoOtaku(
    					rs.getInt("id"),
    					rs.getString("nombre"),
    					rs.getString("categoria"),
    					rs.getDouble("precio"),
    					rs.getInt("stock")
    					));
    		}
    	}catch(SQLException e) {
    		System.out.println("Error al obtener el producto: " +nombre + " : " + e.getMessage());
    	}
    	return producto;
    }
    
    public List<ProductoOtaku>buscarProductoPorCategoria(String categoria){
    	List<ProductoOtaku> producto = new ArrayList<>();
    	String consulta = "SELECT * FROM producto WHERE categoria LIKE ?";
    	
    	try(Connection con = dbConnection.getConexion();
    			PreparedStatement pstmt = con.prepareStatement(consulta);
    			){
    		
    		pstmt.setString(1,"%"+categoria+"%");
    		ResultSet rs = pstmt.executeQuery();
    		
    		while (rs.next()) {
    			producto.add(new ProductoOtaku(
    					rs.getString("nombre"),
    					rs.getString("categoria"),
    					rs.getDouble("precio"),
    					rs.getInt("stock")
    					));
    		}
    	}catch(SQLException e) {
    		System.out.println("Error al obtener el producto: " +categoria + " : " + e.getMessage());
    	}
    	return producto;
    }
    
}
